#include <stdio.h>
#include <string.h>

void pointer_and_fuction();

int main()
{
	/*
	스택
	힙
	데이터 영역
	코드 영역 - 전역 변수 , 함수의 이름도 포인터 저장
	*/

	pointer_and_fuction();

	return 0;
}

int Add(int x, int y) { return x + y; }
int Sub(int x, int y) { return x - y; }
// 반환형과 매개변수 자료형이 같아야 함수 포인터 선언 가능

// 사용하려면 먼저 선언이 되어야 함
typedef struct _player
{
	char name[256];
	char location[256];
	int hp;
	// 함수 포인터 배열
	void (*ifDead[5])(struct _player*);
}player;

void printDead(player* p)
{
	printf("%s 사망\n", p->name);
}

void revive(player* p)
{
	printf("%s 부활\n", p->name);
	p->hp += 200;
}

void moveToTown(player* p)
{
	printf("마을로 이동합니다.\n");
	strcpy_s(p->location, sizeof(p->location), "마을");
}

void pointer_and_fuction()
{
	/// compute
	//{
	//	char op = '\0';
	//	printf("연산자 입력 : ");
	//	scanf_s(" %c", &op, (int)sizeof(op));
	// 
	//	int x = 0;
	//	printf("피연산자 입력 : ");
	//	scanf_s("%d", &x);
	//
	//	int y = 0;
	//	printf("피연산자 입력 : ");
	//	scanf_s("%d", &y);
	//
	//	// 반환형 (*compute)(매개변수)
	//	int (*compute)(int, int) = NULL;
	//	switch (op)
	//	{
	//	case '+':
	//		compute = Add; break;
	//	case '-':
	//		compute = Sub; break;
	//	default:
	//		break;
	//	}
	//
	//	if (compute != NULL)
	//		printf("결과 : %d\n", compute(x, y));
	//}

	///struct pointer function array
	{
		player p = {
			"Wizard",
			"Dungeon",
			100,
			// 포인터는 반드시 선언할때 값 입력 또는 초기화
			{NULL, NULL, NULL}
		};

		p.ifDead[0] = printDead;
		p.ifDead[1] = revive;
		p.ifDead[2] = moveToTown;

		printf("%s의 위치 : %s HP : %d\n", p.name, p.location, p.hp);

		int damage = 0;

		while (true)
		{
			printf("받을 피해 입력(현재 체력 %d) : ", p.hp);
			scanf_s("%d", &damage);

			p.hp -= damage;

			if (p.hp <= 0)
			{
				for (int i = 0; i < 3; i++)
				{
					// 오류 예방용 널 체크
					if (p.ifDead[i] != NULL)
					{
						p.ifDead[i](&p);
					}
				}
				break;
			}
		}

		printf("%s의 위치 : %s HP : %d\n", p.name, p.location, p.hp);

	}
}
