#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <windows.h>
#include <conio.h>

typedef struct Position
{
	int x;
	int y;
}pos;

typedef struct Unit
{
	char name[256];
	int HP;
	int Damage;
	pos pos;
	int level;
	int exp;
}unit;

void Game();

// 0 벽, 1 길, 2 플레이어, 3 몬스터, 4 보물상자
int map[10][10] = {
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 1, 1, 1, 1, 1, 1, 1, 1, 0},
	{0, 1, 1, 1, 3, 1, 1, 1, 1, 0},
	{0, 1, 1, 1, 1, 1, 1, 1, 1, 0},
	{0, 1, 1, 1, 1, 1, 1, 4, 1, 0},
	{0, 1, 1, 1, 1, 1, 1, 1, 1, 0},
	{0, 1, 1, 1, 1, 1, 1, 1, 1, 0},
	{0, 1, 1, 1, 1, 1, 1, 3, 1, 0},
	{0, 2, 1, 1, 1, 1, 1, 1, 1, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
};

int main()
{
	srand((unsigned int)time(NULL));
	Game();

	return 0;
}

void PrintMap()
{
	system("cls");

	for (int y = 0; y < 10; y++)
	{
		for (int x = 0; x < 10; x++)
		{
			if (map[y][x] == 1)
				printf("   ");
			else if (map[y][x] == 2)
				printf("★ ");
			else if (map[y][x] == 3)
				printf("▲ ");
			else if (map[y][x] == 4)
				printf("♧ ");
			else
				printf("■ ");
		}
		printf("\n\n");
	}
}

pos GetPos(int unit)
{
	pos temp = { 0, 0 };

	for (int y = 0; y < 10; y++)
	{
		for (int x = 0; x < 10; x++)
		{
			if (map[y][x] == unit)
			{
				temp.y = y;
				temp.x = x;

				return temp;
			}
		}
	}
	return temp;
}

bool DoMove(pos pos)
{
	if (map[pos.y][pos.x] > 0)
		return true;

	return false;
}

void Swap(pos sour, pos dest)
{
	int temp = map[sour.y][sour.x];
	map[sour.y][sour.x] = map[dest.y][dest.x];
	map[dest.y][dest.x] = temp;
}

void ReSpawn(int code)
{
	for (int i = 0; i < 1; i++)
	{
		int xPos = rand() % 9 + 1;
		int yPos = rand() % 9 + 1;

		if (map[yPos][xPos] == 1)
			map[yPos][xPos] = code;
		else
			i--;

	}
}

void BoxOpen(unit* player, pos dest)
{
	int r = rand() % 5;


	Sleep(300);

	printf("\n상자 발견\n");

	switch (r)
	{
	case 0:
		printf("\n상자에서 체력 증가 아이템을 발견했다.\n");
		player->HP += 500;
		break;
	case 1:
		printf("\n상자에서 공격력 증가 아이템을 발견했다.\n");
		player->Damage += 100;
		break;
	case 2:
		printf("\n함정이였다... 체력 및 공격력이 감소되었다...\n");
		player->HP *= 0.8f;
		player->Damage *= 0.8f;
		break;

	default:
		printf("\n텅 빈 상자였다..\n");
		break;
	}
	map[dest.y][dest.x] = 1;
	ReSpawn(4);
}

void Battle(unit* player, pos dest)
{
	unit Monster[3] = {
		{"고블린", 300, 20, dest, 1, 10},
		{"오크", 500, 40, dest, 5, 50},
		{"트롤", 1000, 40, dest, 10, 100},
	};
	unit randMonster = Monster[rand() % 3];

	int monHP = randMonster.HP;

	while (monHP > 0)
	{
		Sleep(300);

		PrintMap();
		printf("\n%s와 조우\n\n", randMonster.name);

		Sleep(300);
		monHP -= player->Damage;
		if (monHP < 0)
			monHP = 0;
		printf("\n%s의 공격 -> %s의 남은 체력 %d\n\n", player->name, randMonster.name, monHP);

		Sleep(300);
		player->HP -= randMonster.Damage;

		if (player->HP < 0)
			player->HP = 0;

		printf("\n%s의 공격 -> %s의 남은 체력 %d\n\n", randMonster.name, player->name, player->HP);
	}

	if (player->HP > 0)
	{
		Sleep(300);

		printf("\n%s를 처치했다. 경험치 %d 획득\n\n", randMonster.name, randMonster.exp);

		map[dest.y][dest.x] = 1;
		ReSpawn(3);

		player->exp += randMonster.exp;

		if (player->exp > 200)
		{
			printf("\nLevel Up\n");
			player->exp -= 200;
			player->level++;
		}

		Sleep(300);
	}
	else
	{
		printf("\n%s는 쓰러졌다.\n\nGAME OVER\n\n", player->name);
	}
}

void Action(unit* player, pos dest)
{
	if (DoMove(dest))
	{
		if (map[dest.y][dest.x] == 1)
		{
			Swap(player->pos, dest);
		}
		else
		{
			if (map[dest.y][dest.x] == 3)
			{
				Battle(player, dest);
			}
			if (map[dest.y][dest.x] == 4)
			{
				BoxOpen(player, dest);
			}
		}
	}
}

void Move(unit* player, char input)
{
	pos dest = { NULL };

	switch (input)
	{
	case 'w':
		dest = { player->pos.x, player->pos.y - 1 };
		break;
	case 's':
		dest = { player->pos.x, player->pos.y + 1 };
		break;
	case 'a':
		dest = { player->pos.x - 1, player->pos.y };
		break;
	case 'd':
		dest = { player->pos.x + 1, player->pos.y };
		break;
	default:
		break;
	}

	Action(player, dest);
}

void Game()
{
	unit Player = {
		"모험가", 1000, 100, GetPos(2), 1, 0
	};
	unit* player = &Player;

	char c = '0';

	while (player->HP > 0)
	{
		PrintMap();
		printf("%s\tHP : %d\tAtk : %d\nlevel : %d\texp : %d\n", player->name, player->HP, player->Damage, player->level, player->exp);
		c = _getch();

		Move(player, c);
		Player.pos = GetPos(2);
	}
}
